"""
Faturalama ve Ã¶deme iÅŸlemleri iÃ§in Ã¶zel agent
"""

from langchain_ollama import OllamaLLM
from langchain_core.prompts import ChatPromptTemplate
from typing import List


class FaturaAgent:
    """Faturalama ve Ã¶deme iÅŸlemleri iÃ§in Ã¶zel agent sÄ±nÄ±fÄ±"""
    
    def __init__(self, model_name: str = "gemma3:latest"):
        """
        Fatura Agent'i baÅŸlatÄ±r
        
        Args:
            model_name: Ollama'da kullanÄ±lacak model adÄ±
        """
        self.llm = OllamaLLM(
            model=model_name,
            base_url="http://localhost:11434"
        )
        
        # Faturalama konularÄ±na Ã¶zel prompt
        self.prompt = ChatPromptTemplate.from_template(
            """Sen ABCX'Ã¼n faturalama departmanÄ±ndan bir uzmansÄ±n. 
            MÃ¼ÅŸterilerin fatura, Ã¶deme, borÃ§ ve bakiye konularÄ±nda yardÄ±mcÄ± oluyorsun.
            
            Hizmetlerin:
            - Fatura sorgulama ve detaylarÄ±
            - Ã–deme yÃ¶ntemleri ve planlarÄ±
            - BorÃ§ yapÄ±landÄ±rma
            - Bakiye sorgularÄ±
            - Tahsilat sÃ¼reÃ§leri
            - Fatura itirazlarÄ±
            
            MÃ¼ÅŸteriye profesyonel, anlayÄ±ÅŸlÄ± ve Ã§Ã¶zÃ¼m odaklÄ± yaklaÅŸ.
            Gerekirse adÄ±m adÄ±m yÃ¶nlendirme yap.
            
            MÃ¼ÅŸteri talebi: {user_input}
            
            Faturalama UzmanÄ± YanÄ±tÄ±:"""
        )
    
    def handle_billing_request(self, user_input: str, history: List[str] = None) -> str:
        """
        Fatura ile ilgili mÃ¼ÅŸteri taleplerini iÅŸler

        Args:
            user_input: MÃ¼ÅŸterinin fatura talebi
            history: Ã–nceki konuÅŸma geÃ§miÅŸi

        Returns:
            Fatura uzmanÄ±nÄ±n yanÄ±tÄ±
        """
        print(f"ğŸ’³ Fatura Agent: '{user_input}' talebi iÅŸleniyor...")

        # KonuÅŸma geÃ§miÅŸini formatla
        conversation_context = ""
        if history:
            conversation_context = "\n".join([f"- {msg}" for msg in history[-5:]])  # Son 5 mesaj
            conversation_context = f"\n\nÃ–nceki konuÅŸma:\n{conversation_context}\n"

        # Prompt'u gÃ¼ncelle
        updated_prompt = ChatPromptTemplate.from_template(
            """Sen bir telekomÃ¼nikasyon ÅŸirketi faturalama uzmanÄ±sÄ±n. 
            MÃ¼ÅŸterilerinizle profesyonel, yardÄ±mcÄ± ve sabÄ±rlÄ± bir ÅŸekilde konuÅŸ.
            
            UzmanlÄ±k alanlarÄ±n:
            - Fatura sorgulama ve aÃ§Ä±klama
            - Ã–deme planlarÄ± ve taksitlendirme
            - BorÃ§ yapÄ±landÄ±rma
            - Fatura itirazlarÄ±
            - Ã–deme yÃ¶ntemleri
            - Bakiye sorgulama
            
            GÃ¶revlerin:
            1. MÃ¼ÅŸterinin fatura sorununu anlayÄ±p Ã§Ã¶z
            2. Gerekirse Ã¶deme seÃ§enekleri sun
            3. Net ve anlaÅŸÄ±lÄ±r bilgi ver
            4. MÃ¼ÅŸteriyi memnun et{conversation_context}
            
            MÃ¼ÅŸteri talebi: {user_input}
            
            Faturalama UzmanÄ± YanÄ±tÄ±:"""
        )
        
        formatted_prompt = updated_prompt.format(
            user_input=user_input,
            conversation_context=conversation_context
        )
        response = self.llm.invoke(formatted_prompt)
        
        print(f"ğŸ’³ Fatura Agent yanÄ±tÄ±: {response[:100]}...")
        return response
